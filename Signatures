```
#refer to https://github.com/p-gueguen/SUV39H1_CAR_T

# loading pakages
library(Seurat)
library(ggplot2)
library(sctransform)
library(patchwork)
library(pheatmap)
library(Scillus)
library(pals)
library(RColorBrewer)
library(tidyverse)
library(paletteer)
library(EnhancedVolcano)
library(readxl)
library(ggsignif)
library(harmony)
library(Nebulosa)
library(data.table)
library(gridExtra)
library(CytoTRACE2)


# 设置orig.ident为因子，并指定水平的顺序
CART_T@meta.data[["orig.ident"]] <- factor(CART_T@meta.data[["orig.ident"]], 
                                          levels = c("CART_D5", "CART_D14", "CART_D21"))

# Signatures
sign_memory <- read.csv("J:/10x sc-RNA seq/signatures/stemness_membery.csv", header=T)[,1]
# 假设CART_T是一个Seurat对象且特征数据存储在RNA测定中
gene_names_in_CART_T <- rownames(CART_T[["RNA"]])
# 检查sign_memory中的每个名称是否存在于gene_names_in_CART_T中
exists_in_CART_T <- sign_memory %in% gene_names_in_CART_T
# 打印出存在性检查的结果
exists_in_CART_T
CART_T_stem_mem <- AddModuleScore(CART_T,features = sign_memory,name = "Stem_Memery", assay = "RNA")
head(CART_T_stem_mem@meta.data)
colnames(CART_T_stem_mem@meta.data)[16] <- 'Stem_Score'
VlnPlot(CART_T_stem_mem,features = 'Stem_Score', 
        pt.size = 0,group.by = "orig.ident")

Cytotoxic Effectors
sign_cytoxic <- read.csv("J:/10x sc-RNA seq/signatures/Cytotoxic Effectors.csv", header=T)[,1]
exists_in_CART_T <- sign_cytoxic %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_cytoxic <- AddModuleScore(CART_T,features = sign_cytoxic,name = "cytoxic", assay = "RNA")
colnames(CART_T_cytoxic@meta.data)[16] <- 'cytoxic'
VlnPlot(CART_T_cytoxic,features = 'cytoxic', 
         pt.size = 0,group.by = "orig.ident")

Resident Memory
sign_RM <- read.csv("J:/10x sc-RNA seq/signatures/Resident Memory.csv", header=T)[,1]
exists_in_CART_T <- sign_RM %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_RM <- AddModuleScore(CART_T,features = sign_RM,name = "RM", assay = "RNA")
colnames(CART_T_RM@meta.data)[16] <- 'RM'
VlnPlot(CART_T_RM,features = 'RM', 
         pt.size = 0,group.by = "orig.ident")

Circulating
sign_Circulating <- read.csv("J:/10x sc-RNA seq/signatures/Circulating.csv", header=T)[,1]
exists_in_CART_T <- sign_Circulating %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Circulating <- AddModuleScore(CART_T,features = sign_Circulating,name = "Circulating", assay = "RNA")
colnames(CART_T_Circulating@meta.data)[16] <- 'Circulating'
VlnPlot(CART_T_Circulating,features = 'Circulating', 
         pt.size = 0,group.by = "orig.ident")

Effector-like
sign_Effector_like <- read.csv("J:/10x sc-RNA seq/signatures/Effector-like.csv", header=T)[,1]
exists_in_CART_T <- sign_Effector_like %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Effector_like <- AddModuleScore(CART_T,features = sign_Effector_like,name = "Effector-like", assay = "RNA")
colnames(CART_T_Effector_like@meta.data)[16] <- 'Effector-like'
VlnPlot(CART_T_Effector_like,features = 'Effector-like', 
         pt.size = 0,group.by = "orig.ident")


Progenitor Exhausted
sign_Pex <- read.csv("J:/10x sc-RNA seq/signatures/Progenitor Exhausted.csv", header=T)[,1]
exists_in_CART_T <- sign_Pex %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Pex <- AddModuleScore(CART_T,features = sign_Pex,name = "Progenitor Exhausted", assay = "RNA")
colnames(CART_T_Pex@meta.data)[16] <- 'Progenitor Exhausted'
VlnPlot(CART_T_Pex,features = 'Progenitor Exhausted', 
         pt.size = 0,group.by = "orig.ident")

Terminally Exhausted
sign_Tex <- read.csv("J:/10x sc-RNA seq/signatures/Terminally Exhausted.csv", header=T)[,1]
exists_in_CART_T <- sign_Tex %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Tex <- AddModuleScore(CART_T,features = sign_Tex,name = "Terminally Exhausted", assay = "RNA")
colnames(CART_T_Tex@meta.data)[16] <- 'Terminally Exhausted'
VlnPlot(CART_T_Tex,features = 'Terminally Exhausted', 
         pt.size = 0,group.by = "orig.ident")

Memory Precursors
sign_Pme <- read.csv("J:/10x sc-RNA seq/signatures/Memory Precursors.csv", header=T)[,1]
exists_in_CART_T <- sign_Pme %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Pme <- AddModuleScore(CART_T,features = sign_Pme,name = "Memory Precursors", assay = "RNA")
colnames(CART_T_Pme@meta.data)[16] <- 'Memory Precursors'
VlnPlot(CART_T_Pme,features = 'Memory Precursors', 
         pt.size = 0,group.by = "orig.ident")


Progenitor Exhausted.1
sign_Pex.1 <- read.csv("J:/10x sc-RNA seq/signatures/Progenitor Exhausted.1.csv", header=T)[,1]
exists_in_CART_T <- sign_Pex.1 %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Pex.1 <- AddModuleScore(CART_T,features = sign_Pex.1,name = "Progenitor Exhausted.1", assay = "RNA")
colnames(CART_T_Pex.1@meta.data)[16] <- 'Progenitor Exhausted.1'
VlnPlot(CART_T_Pex.1,features = 'Progenitor Exhausted.1', 
         pt.size = 0,group.by = "orig.ident")


Terminally Exhausted.1

sign_Tex.1 <- read.csv("J:/10x sc-RNA seq/signatures/sig.csv", header=T)[,1]
exists_in_CART_T <- sign_Tex.1 %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Tex.1 <- AddModuleScore(CART_T,features = sign_Tex.1,name = "Terminally Exhausted.1", assay = "RNA")
colnames(CART_T_Tex.1@meta.data)[16] <- 'Terminally Exhausted.1'
VlnPlot(CART_T_Tex.1,features = 'Terminally Exhausted.1', 
         pt.size = 0,group.by = "orig.ident")

DNMT3A Multipotency
sign_DNMT3A <- read.csv("J:/10x sc-RNA seq/signatures/sig.csv", header=T)[,2]
exists_in_CART_T <- sign_DNMT3A %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_DNMT3A <- AddModuleScore(CART_T,features = sign_DNMT3A,name = "DNMT3A Multipotency", assay = "RNA")
colnames(CART_T_DNMT3A@meta.data)[16] <- 'DNMT3A Multipotency'
VlnPlot(CART_T_DNMT3A,features = 'DNMT3A Multipotency', 
         pt.size = 0,group.by = "orig.ident")

Cytotoxic CD8
sign_ccd8 <- read.csv("J:/10x sc-RNA seq/signatures/Cytotoxic CD8.csv", header=T)[,1]
exists_in_CART_T <- sign_ccd8 %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_ccd8 <- AddModuleScore(CART_T,features = sign_ccd8,name = "Cytotoxic CD8", assay = "RNA")
colnames(CART_T_ccd8@meta.data)[16] <- 'Cytotoxic CD8'
VlnPlot(CART_T_ccd8,features = 'Cytotoxic CD8', 
         pt.size = 0,group.by = "orig.ident")

Exhausted
sign_ex <- read.csv("J:/10x sc-RNA seq/signatures/Exhausted.csv", header=T)[,1]
exists_in_CART_T <- sign_ex %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_ex <- AddModuleScore(CART_T,features = sign_ex,name = "Exhausted", assay = "RNA")
colnames(CART_T_ex@meta.data)[13] <- 'Exhausted'
VlnPlot(CART_T_ex,features = 'Exhausted', 
         pt.size = 0,group.by = "orig.ident")

Stem-like
sign_Stem <- read.csv("J:/10x sc-RNA seq/signatures/Stem-like.csv", header=T)[,1]
exists_in_CART_T <- sign_Stem %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Stem <- AddModuleScore(CART_T,features = sign_Stem,name = "Stem-like", assay = "RNA")
colnames(CART_T_Stem@meta.data)[13] <- 'Stem-like'
VlnPlot(CART_T_Stem,features = 'Stem-like', 
         pt.size = 0,group.by = "orig.ident")

Cell Cycle
sign_Cell_Cycle <- read.csv("J:/10x sc-RNA seq/signatures/Cell Cycle.csv", header=T)[,1]
exists_in_CART_T <- sign_Cell_Cycle %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Cell_Cycle <- AddModuleScore(CART_T,features = sign_Cell_Cycle,name = "Cell_Cycle", assay = "RNA")
colnames(CART_T_Cell_Cycle@meta.data)[13] <- 'Cell_Cycle'
VlnPlot(CART_T_Cell_Cycle,features = 'Cell_Cycle', 
         pt.size = 0,group.by = "orig.ident")

Long  Persistence
sign_LR <- read.csv("J:/10x sc-RNA seq/signatures/Long  Persistence.csv", header=T)[,1]
exists_in_CART_T <- sign_LR %in% gene_names_in_CART_T
exists_in_CART_T
CART_T_Cell_Cycle <- AddModuleScore(CART_T,features = sign_LR,name = "Long  Persistence", assay = "RNA")
colnames(CART_T_LR@meta.data)[13] <- 'Long  Persistence'
VlnPlot(CART_T_LR,features = 'Long  Persistence', 
         pt.size = 0,group.by = "orig.ident")


# VP split per 4 conditions
VlnPlot(suv.car.t.integrated.merged.timepoints.premerged.cd4s.cleaned.cleaned, 
    c("KLF2"),
    pt.size = 0.01,
    split.by = "genotype_timepoint", y.max = 5,
    cols = c("darkgrey", "firebrick3", "black", "red")
  ) & theme(axis.title.x = element_blank()) &
  theme(axis.text.x = element_text(
    angle = 90,
    vjust = 0.5,
    hjust = 1,
    size = 12
  )) & geom_signif(
  comparisons = list(c("Mock D8", "gSUV D8"), c("Mock D28", "gSUV D28")),
  map_signif_level = TRUE,
  textsize = 6,
  test = "wilcox.test",
  y_position = 4.5,
) 



# 假设sign_Cell_Cycle是你的Seurat对象
p <- VlnPlot(CART_T_Cell_Cycle, features = sign_Cell_Cycle, pt.size = 0, group.by = "orig.ident", 
             cols = c("darkgrey", "firebrick3", "black")) +
    theme(axis.title.x = element_blank()) +
    geom_signif(comparisons = list(c("CART_D5", "CART_D14"), c("CART_D5", "CART_D21")),
                map_signif_level = TRUE, textsize = 6, test = "wilcox.test", y_position = 0.7) +
    stat_summary(fun = median, geom = "point", size = 12, colour = "white", shape = 95) +
    theme(legend.position = "none") +
    ggtitle("Cell cycle")

# 打印或查看绘图
print(p)

library(UCell)
pdf("Lowery_2022_sign_CD4_UCell.pdf", height = 6, width = 7)
for (i in colnames(Lowery.sign)) {
  suv.car.t.integrated.merged.timepoints.premerged.cd4s.cleaned <- AddModuleScore_UCell(suv.car.t.integrated.merged.timepoints.premerged.cd4s.cleaned, features = list(Lowery.sign[[i]]), name = i, assay = "RNA")
  plot(FeaturePlot(suv.car.t.integrated.merged.timepoints.premerged.cd4s.cleaned, paste0( "signature_1",i), pt.size = 0.8, min.cutoff = "q3", max.cutoff = "q97", order = T) + scale_color_paletteer_c("pals::coolwarm") +ggtitle(i))
}
dev.off()


FeaturePlot(CART_T_Cell_Cycle, features = sign_Cell_Cycle, pt.size = 0.8, min.cutoff = "q3", max.cutoff = "q97", order = T) + scale_color_paletteer_c("pals::coolwarm") 


# Remake Density plot - common scale for Mock & KO within each time point, add cell number per condition
df <- as.data.frame(Embeddings(object = suv.car.t.integrated.merged.timepoints.premerged.cd4s.cleaned, reduction = "umap"))
df <- cbind(df, suv.car.t.integrated.merged.timepoints.premerged.cd4s.cleaned$timepoint, suv.car.t.integrated.merged.timepoints.premerged.cd4s.cleaned$genotype)
colnames(df) <- c("UMAP_1", "UMAP_2", "timepoint", "genotype")
df$timepoint <- factor(x = df$timepoint, levels = c("D8", "D28"))
df$genotype <- factor(x = df$genotype, levels = c("Mock", "gSUV"))
df.a <- df %>% filter(timepoint == "D8")
table(df.a$genotype)
labels <- c("Mock - 9322 cells", "gSUV - 9629 cells")
names(labels) <- c("Mock", "gSUV")
a <- plot(ggplot(data = df.a) +
            geom_point(data = df.a, aes(x = UMAP_1, y = UMAP_2), color = "lightgrey", size = 0.5) +
            stat_density_2d(aes(x = UMAP_1, y = UMAP_2, fill = after_stat(level), alpha = (..level..)), bins = 20, geom = "polygon") +
            theme_classic() +
            xlim(c(-9, 11)) +
            ylim(c(-7, 8)) +
            scale_fill_viridis_c(option = "plasma") +
            facet_grid(. ~ genotype, labeller = labeller(genotype = labels)) +
            theme(
              strip.text.x = element_text(
                size = 20, color = "black",
                face = "bold"
              ),
              strip.text.y = element_text(
                size = 20, color = "black",
                face = "bold"
              )
            ))
labels <- c("Mock - 14073 cells", "gSUV - 13611 cells")
names(labels) <- c("Mock", "gSUV")
df.b <- df %>% filter(timepoint == "D28")
table(df.b$genotype)
b <- plot(ggplot(data = df.b) +
            geom_point(data = df.b, aes(x = UMAP_1, y = UMAP_2), color = "lightgrey", size = 0.5) +
            stat_density_2d(aes(x = UMAP_1, y = UMAP_2, fill = after_stat(level), alpha = (..level..)), bins = 30, geom = "polygon") +
            theme_classic() +
            xlim(c(-9, 11)) +
            ylim(c(-7, 8)) +
            scale_fill_viridis_c(option = "plasma") +
            facet_grid(. ~ genotype, labeller = labeller(genotype = labels)) +
            theme(
              strip.text.x = element_text(
                size = 20, color = "black",
                face = "bold"
              ),
              strip.text.y = element_text(
                size = 20, color = "black",
                face = "bold"
              )
            ))

a + b + plot_layout(ncol = 1) & NoLegend()



```
#单个基因 Nebulosa
genes <- c("BCL2","SATB1","ID3","KLRG1","ZNF683","ID2", "GNLY","GZMK","CX3CR1", "HAVCR2","ENTPD1","S1PR1","RBPJ","FOS","JUN","JUNB","CD69")
genes <- c("TCF7", "KLF2", "LEF1", "CCR7","SELL","CD27", "IL7R", "GZMB", "GZMA", "PDCD1",  "LAG3", "TOX")
genes <- c("BCL2","GZMK")
pdf(file = "Nebulosa_CD4.pdf", height = 3, width = 3)
for (i in 1:length(genes)){
  plot(plot_density(suv.car.t.integrated.merged.timepoints.premerged.cd4s.cleaned, features = genes[i],  reduction = "umap") & NoLegend() & NoAxes())
}
dev.off()
